<?php

namespace SenseiTarzan\CombatLogger\Entity;

use pocketmine\entity\Human;
use pocketmine\lang\Translatable;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;
use pocketmine\network\mcpe\protocol\types\entity\StringMetadataProperty;
use SenseiTarzan\CombatLogger\Utils\CustomKnownTranslationFactory;
use SenseiTarzan\LanguageSystem\Component\LanguageManager;

class CloneAttacker extends Human
{

    const DEFAULT_COUNTER_TICK = 30 * 20;
    private int $counter = self::DEFAULT_COUNTER_TICK;
    private string $name;

    protected function initEntity(CompoundTag $nbt): void
    {
        $this->setCanSaveWithChunk(false);
        parent::initEntity($nbt);
        $this->setNameTagVisible();
        $this->setNameTagAlwaysVisible();
        $this->name = $nbt->getString("NameVictim");
    }

    public function getName(): string
    {
        return $this->name; // TODO: Change the autogenerated stub
    }


    public function onUpdate(int $currentTick): bool
    {
        $currentTick = parent::onUpdate($currentTick);
        $this->counter -= $currentTick;
        if ($this->counter <= 0) {
            $this->flagForDespawn();
            return false;
        }
        $this->setNameTagCustom(CustomKnownTranslationFactory::combat_logger_nametag($this->getName(), floor($this->counter / 20)));
        return $currentTick;
    }

    public function setNameTagCustom(string|Translatable $translatable): void
    {
        foreach ($this->getViewers() as $viewer){
            $this->sendData([$viewer], [EntityMetadataProperties::NAMETAG => new StringMetadataProperty($translatable instanceof Translatable ? LanguageManager::getInstance()->getTranslateWithTranslatable($viewer,$translatable) : $translatable)]);

        }
    }
}